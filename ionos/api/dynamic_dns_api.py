# coding: utf-8

"""
    DNS API

    ## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Support</a>.  Please note that we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>   <ul>     <li>Version 1.0.0 Exposed CRUD operations for customer zone.</li>     <li>Version 1.0.1 Added response body for UPDATE and CREATE record operations.</li>     <li>Version 1.0.2 Added new supported record types.</li>   </ul> </details> </h2>   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ionos.api_client import ApiClient


class DynamicDNSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_dyn_dns(self, body, **kwargs):  # noqa: E501
        """activate_dyn_dns  # noqa: E501

        Activate Dynamic Dns for a bundle of (sub)domains. The url from response will be used to update the ips of the (sub)domains. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_dyn_dns(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynDnsRequest body: Dynamic Dns configuration. (required)
        :return: DynamicDns
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_dyn_dns_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_dyn_dns_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def activate_dyn_dns_with_http_info(self, body, **kwargs):  # noqa: E501
        """activate_dyn_dns  # noqa: E501

        Activate Dynamic Dns for a bundle of (sub)domains. The url from response will be used to update the ips of the (sub)domains. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_dyn_dns_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynDnsRequest body: Dynamic Dns configuration. (required)
        :return: DynamicDns
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_dyn_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate_dyn_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/dyndns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DynamicDns',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dyn_dns(self, bulk_id, **kwargs):  # noqa: E501
        """delete_dyn_dns  # noqa: E501

        Disable Dynamic Dns for bulk id. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dyn_dns(bulk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bulk_id: Dynamic Dns configuration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dyn_dns_with_http_info(bulk_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dyn_dns_with_http_info(bulk_id, **kwargs)  # noqa: E501
            return data

    def delete_dyn_dns_with_http_info(self, bulk_id, **kwargs):  # noqa: E501
        """delete_dyn_dns  # noqa: E501

        Disable Dynamic Dns for bulk id. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dyn_dns_with_http_info(bulk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str bulk_id: Dynamic Dns configuration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bulk_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dyn_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bulk_id' is set
        if ('bulk_id' not in params or
                params['bulk_id'] is None):
            raise ValueError("Missing the required parameter `bulk_id` when calling `delete_dyn_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bulk_id' in params:
            path_params['bulkId'] = params['bulk_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/dyndns/{bulkId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_dyn_dns(self, **kwargs):  # noqa: E501
        """disable_dyn_dns  # noqa: E501

        Disable Dynamic Dns. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_dyn_dns(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_dyn_dns_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.disable_dyn_dns_with_http_info(**kwargs)  # noqa: E501
            return data

    def disable_dyn_dns_with_http_info(self, **kwargs):  # noqa: E501
        """disable_dyn_dns  # noqa: E501

        Disable Dynamic Dns. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_dyn_dns_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_dyn_dns" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/dyndns', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dyn_dns(self, body, bulk_id, **kwargs):  # noqa: E501
        """update_dyn_dns  # noqa: E501

        Update Dynamic Dns for bulk id. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dyn_dns(body, bulk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynDnsRequest body: Dynamic Dns configuration. (required)
        :param str bulk_id: Dynamic Dns configuration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_dyn_dns_with_http_info(body, bulk_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dyn_dns_with_http_info(body, bulk_id, **kwargs)  # noqa: E501
            return data

    def update_dyn_dns_with_http_info(self, body, bulk_id, **kwargs):  # noqa: E501
        """update_dyn_dns  # noqa: E501

        Update Dynamic Dns for bulk id. The following quota applies: 2 requests per minute per IP address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_dyn_dns_with_http_info(body, bulk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DynDnsRequest body: Dynamic Dns configuration. (required)
        :param str bulk_id: Dynamic Dns configuration identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'bulk_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dyn_dns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dyn_dns`")  # noqa: E501
        # verify the required parameter 'bulk_id' is set
        if ('bulk_id' not in params or
                params['bulk_id'] is None):
            raise ValueError("Missing the required parameter `bulk_id` when calling `update_dyn_dns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bulk_id' in params:
            path_params['bulkId'] = params['bulk_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/dyndns/{bulkId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
