# coding: utf-8

"""
    DNS API

    ## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Support</a>.  Please note that we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>   <ul>     <li>Version 1.0.0 Exposed CRUD operations for customer zone.</li>     <li>Version 1.0.1 Added response body for UPDATE and CREATE record operations.</li>     <li>Version 1.0.2 Added new supported record types.</li>   </ul> </details> </h2>   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invalid_fields': 'list[str]',
        'required_fields': 'list[str]',
        'invalid': 'list[str]',
        'input_record': 'Record',
        'error_record': 'Record'
    }

    attribute_map = {
        'invalid_fields': 'invalidFields',
        'required_fields': 'requiredFields',
        'invalid': 'invalid',
        'input_record': 'inputRecord',
        'error_record': 'errorRecord'
    }

    def __init__(self, invalid_fields=None, required_fields=None, invalid=None, input_record=None, error_record=None):  # noqa: E501
        """ErrorsInner - a model defined in Swagger"""  # noqa: E501
        self._invalid_fields = None
        self._required_fields = None
        self._invalid = None
        self._input_record = None
        self._error_record = None
        self.discriminator = None
        if invalid_fields is not None:
            self.invalid_fields = invalid_fields
        if required_fields is not None:
            self.required_fields = required_fields
        if invalid is not None:
            self.invalid = invalid
        if input_record is not None:
            self.input_record = input_record
        if error_record is not None:
            self.error_record = error_record

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this ErrorsInner.  # noqa: E501


        :return: The invalid_fields of this ErrorsInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this ErrorsInner.


        :param invalid_fields: The invalid_fields of this ErrorsInner.  # noqa: E501
        :type: list[str]
        """

        self._invalid_fields = invalid_fields

    @property
    def required_fields(self):
        """Gets the required_fields of this ErrorsInner.  # noqa: E501


        :return: The required_fields of this ErrorsInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_fields

    @required_fields.setter
    def required_fields(self, required_fields):
        """Sets the required_fields of this ErrorsInner.


        :param required_fields: The required_fields of this ErrorsInner.  # noqa: E501
        :type: list[str]
        """

        self._required_fields = required_fields

    @property
    def invalid(self):
        """Gets the invalid of this ErrorsInner.  # noqa: E501


        :return: The invalid of this ErrorsInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this ErrorsInner.


        :param invalid: The invalid of this ErrorsInner.  # noqa: E501
        :type: list[str]
        """

        self._invalid = invalid

    @property
    def input_record(self):
        """Gets the input_record of this ErrorsInner.  # noqa: E501


        :return: The input_record of this ErrorsInner.  # noqa: E501
        :rtype: Record
        """
        return self._input_record

    @input_record.setter
    def input_record(self, input_record):
        """Sets the input_record of this ErrorsInner.


        :param input_record: The input_record of this ErrorsInner.  # noqa: E501
        :type: Record
        """

        self._input_record = input_record

    @property
    def error_record(self):
        """Gets the error_record of this ErrorsInner.  # noqa: E501


        :return: The error_record of this ErrorsInner.  # noqa: E501
        :rtype: Record
        """
        return self._error_record

    @error_record.setter
    def error_record(self, error_record):
        """Sets the error_record of this ErrorsInner.


        :param error_record: The error_record of this ErrorsInner.  # noqa: E501
        :type: Record
        """

        self._error_record = error_record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
