# coding: utf-8

"""
    DNS API

    ## Working with the API Every endpoint uses the `X-API-Key` header for authorization, to obtain the key please see the [Official Documentation](/docs/getstarted).  Please note that any zone or record updates might conflict with active services. In such cases, the DNS records belonging to the conflicting services will be deactivated.  ## Support Support questions may be posted in English: <a href='/docs/getstarted#support'>API Support</a>.  Please note that we offer support in the business Hours Mo-Fri 9:00-17:00 EET. <h2> <details>   <summary>Release notes</summary>   <ul>     <li>Version 1.0.0 Exposed CRUD operations for customer zone.</li>     <li>Version 1.0.1 Added response body for UPDATE and CREATE record operations.</li>     <li>Version 1.0.2 Added new supported record types.</li>   </ul> </details> </h2>   # noqa: E501

    OpenAPI spec version: 1.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Record(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'RecordTypes',
        'content': 'str',
        'ttl': 'int',
        'prio': 'int',
        'disabled': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'content': 'content',
        'ttl': 'ttl',
        'prio': 'prio',
        'disabled': 'disabled'
    }

    def __init__(self, name=None, type=None, content=None, ttl=None, prio=None, disabled=False):  # noqa: E501
        """Record - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._content = None
        self._ttl = None
        self._prio = None
        self._disabled = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if content is not None:
            self.content = content
        if ttl is not None:
            self.ttl = ttl
        if prio is not None:
            self.prio = prio
        if disabled is not None:
            self.disabled = disabled

    @property
    def name(self):
        """Gets the name of this Record.  # noqa: E501


        :return: The name of this Record.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Record.


        :param name: The name of this Record.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Record.  # noqa: E501


        :return: The type of this Record.  # noqa: E501
        :rtype: RecordTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Record.


        :param type: The type of this Record.  # noqa: E501
        :type: RecordTypes
        """

        self._type = type

    @property
    def content(self):
        """Gets the content of this Record.  # noqa: E501


        :return: The content of this Record.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Record.


        :param content: The content of this Record.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def ttl(self):
        """Gets the ttl of this Record.  # noqa: E501

        Time to live for the record, recommended 3600.  # noqa: E501

        :return: The ttl of this Record.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Record.

        Time to live for the record, recommended 3600.  # noqa: E501

        :param ttl: The ttl of this Record.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def prio(self):
        """Gets the prio of this Record.  # noqa: E501


        :return: The prio of this Record.  # noqa: E501
        :rtype: int
        """
        return self._prio

    @prio.setter
    def prio(self, prio):
        """Sets the prio of this Record.


        :param prio: The prio of this Record.  # noqa: E501
        :type: int
        """

        self._prio = prio

    @property
    def disabled(self):
        """Gets the disabled of this Record.  # noqa: E501

        When is true, the record is not visible for lookup.  # noqa: E501

        :return: The disabled of this Record.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Record.

        When is true, the record is not visible for lookup.  # noqa: E501

        :param disabled: The disabled of this Record.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Record, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Record):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
